 - We start by outlineing the main sections of the application UI.

    - header
    - navigation
    - email list
    - preview panel
    - footer

 - Now we can layout our basic elements in the DOM. Anyone looking at this could easily see what the different sections
   of the UI are.

    <!-- header -->
    <header></header>

    <!-- navigation -->
    <nav></nav>

    <!-- list of emails -->
    <main></main>

    <!-- previe panel -->
    <aside></aside>

    <!-- footer -->
    <footer>/footer>

 - Next we need to figure out how to display these sections on different screen sizes. For this example lets focus on 
   small, medium, and large size screens.

    [sections.jpg]

 - We need to draw a grid that will encapsulate all of the sections of the UI.

    [grid-areas.jpg]

 - Look at the medium display example.  Notice how there are two cells that are labeled "Header".
   This is because our header section will take up both of those cells.  The entire space both 
   Header parts take up is called a grid-area.  The grid-area defines and names a portion of the entire
   grid.  By having this, we can simply use CSS tell the <header> element to be placed in the "header" grid-area.
   We could even tell the <header> element to be positioned in the "footer" grid-area and you would see your
   UI heading at the bottom!  This is handy because it means we can change the ordering and position and size of our html 
   elements with just a single css rule!

   A common use case is to move, scale, or reposition elements on different screen sizes.  We can use media queries
   and the grid-template-areas css attribute to set the grid-area size and positions. For this application
   we want the navigation to be at the top on small displays, but on larger displays it should be on the side.
   We can easily make this position by rearranging the grid-areas using the grid-template-areas CSS rule.

    Define the grid areas and how they are positioned in CSS:

        /* Small Screens */

        .grid-container {
            display: grid;
            grid-template-areas: 
                "header" 
                "nav" 
                "main" 
                "footer";
        }

        /* Medium Screens */

        @media only screen and (min-width: 768px) {
            .grid-container {
                grid-template-areas: 
                    "header   header" 
                    "nav      main" 
                    "footer   footer";
            }
        }

        /* Large Screens */

        @media only screen and (min-width: 1200px) {
            .grid-container {
                grid-template-areas: 
                    "header  header     header" 
                    "nav     main       subcontent" 
                    "footer  footer     footer";
            }
        }

 - Now that we have defined how we want the grid-areas to be positioned, we need to associate our page
   elements with specific grid-areas.  An element can specify 'grid-area' and the name of the grid-area. 
   This will place the element into that grid-area in the layout.

   Note that in this example most of the element names are the same as the grid-area name. This is
   not required and is just to simplify the example.

        header {
            grid-area: header;
        }

        nav {
            grid-area: nav;
        }

        main {
            grid-area: main;
        }

        aside {
            grid-area: subcontent;
        }

        footer {
            grid-area: footer;
        }

 - One thing you'll notice if you use the code above, is that the heights and widths of the grid are not
   how we want them.  We need to specify the height for each row, and the width for each column.  

   Row height is specified using the grid-template-rows CSS rule.

   Column width is specified using the grid-template-rows CSS rule.

        /* Small Screens */

        .grid-container {
            display: grid;
            /* sets the height of each row */
            grid-template-rows: 50px 50px 1fr 30px;
            /* defines the grid areas */
            grid-template-areas: 
                "header" 
                "nav" 
                "main" 
                "footer";
        }

        /* Medium Screens */

        @media only screen and (min-width: 768px) {
            .grid-container {
                /* sets the width of each column */
                grid-template-columns: 200px 1fr;
                /* sets the height of each row */
                grid-template-rows: 50px 1fr 30px;
                /* defines the grid areas */
                grid-template-areas: 
                    "header   header" 
                    "nav      main" 
                    "footer   footer";
            }
        }

        /* Large Screens */

        @media only screen and (min-width: 1200px) {
            .grid-container {
                /* sets the width of each column */
                grid-template-columns: 200px 1fr 1fr;
                /* sets the height of each row */
                grid-template-rows: 50px 1fr 30px;
                /* defines the grid areas */
                grid-template-areas: 
                    "header  header     header" 
                    "nav     main       subcontent" 
                    "footer  footer     footer";
            }
        }

